sonarqube {
    properties {
        property "sonar.projectName", "de.qaware.chronix:chronix-solr-cloud-storage"
    }
}

dependencies {
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.apache.solr:solr-solrj:5.4.1'

    compile 'com.google.protobuf:protobuf-java:2.5.0'

    compile 'de.qaware.chronix:chronix-api:0.1'
    compile 'de.qaware.chronix:chronix-kassiopeia-simple:0.1.8-beta-1'
    compile 'de.qaware.chronix:chronix-kassiopeia:0.1.8-beta-1'
    compile 'de.qaware.chronix:chronix-kassiopeia-converter-common:0.1.8-beta-1'
    compile 'de.qaware.chronix:chronix-kassiopeia-simple-converter:0.1.8-beta-1'

    //Kryo for data storage (with included shaded asm - just to be sure)
    compile 'com.esotericsoftware:kryo-shaded:3.0.3'
}

//add the generated classes to the sources
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/generated'
        }
    }
}


task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {

    inceptionYear '2016'

    scm {
        connection "scm:git:${project.scmUrl}"
        developerConnection "scm:git:${project.scmUrl}"
        url project.websiteUrl
    }

    issueManagement {
        system 'GitHub'
        url project.issueTrackerUrl
    }

    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    organisation {
        name 'QAware GmbH'
        url 'https://www.qaware.de'
    }

    developers {
        developer {
            id 'florianlautenschlager'
            name 'Florian Lautenschlager'
            email 'florian.lautenschlager@qaware.de'
            organization 'QAware GmbH'
            organizationUrl 'https://www.qaware.de'
            roles { role 'Developer' }
        }
        developer {
            id 'adersberger'
            name 'Josef Adersberger'
            email 'josef.adersberger@qaware.de'
            organization 'QAware GmbH'
            organizationUrl 'https://www.qaware.de'
            roles { role 'Developer' }
        }
    }
}

publishing {
    publications {
        chronixSolrCloudStorage(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('name', project.displayName)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', project.websiteUrl)

                asNode().children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'unknown'
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : 'unknown'
    publications = ['chronixSolrCloudStorage']
    dryRun = false
    publish = true
    pkg {
        repo = project.bintrayRepo
        name = project.name
        desc = project.description
        licenses = ['Apache-2.0']
        labels = ['java', 'time series', 'chronix', 'spark']
        websiteUrl = project.websiteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = project.scmUrl
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = project.description
            released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
            vcsTag = "v${project.version}"
            attributes = [
                    'chronix-solr-cloud-storage': ['de.qaware.chronix', project.group, project.name].join(':')
            ]
            mavenCentralSync {
                sync = false
            }
        }
    }
}

pluginBundle {
    website = project.websiteUrl
    vcsUrl = project.scmUrl

    plugins {
        basePlugin {
            id = 'de.qaware.chronix'
            displayName = project.displayName
            description = project.description
            tags = ['chronix', 'time series database', 'spark', "rdd"]
            version = project.version
        }
    }
}

//Build a fat jar that can loaded into spark
jar {
    dependsOn configurations.runtime
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}
